import pygame
import sys
import numpy as np

pygame.init()

WIDTH = 400
HEIGHT = 400
LINE_WIDTH = 10
BOARD_ROWS = 3
BOARD_COLS = 3
RED = (255, 0, 0)
BG_COLOR = (28, 178, 156)
LINE_COLOR = (23, 145, 135)
CIRCLE_RADIUS = 40
CIRCLE_WIDTH = 10
CIRCLE_COLOR = (239, 231, 200)
CROSS_WIDTH = 15
CROSS_COLOR= (66, 66, 66)
SPACE = 30

screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('TIC TAC TOE')
screen.fill(BG_COLOR)

# board
board = np.zeros((BOARD_ROWS, BOARD_COLS))


# drawing the lines


def draw_lines():
    #first horizontal line
    pygame.draw.line(screen, LINE_COLOR, (0, 125), (400, 125),  LINE_WIDTH)
    #second horizontal line
    pygame.draw.line(screen, LINE_COLOR, (0, 275), (400, 275), LINE_WIDTH)
    #first vertical line
    pygame.draw.line(screen, LINE_COLOR, (125, 0), (125, 400), LINE_WIDTH)
    #second vertical line
    pygame.draw.line(screen, LINE_COLOR, (275, 0), (275, 400), LINE_WIDTH)



def draw_figures():
    for row in range(BOARD_ROWS):
        for col in range(BOARD_COLS):
            if board[row][col] == 2:
                pygame.draw.circle(screen, CIRCLE_COLOR, (int(col * 133 + 133 / 2), int(row * 133 + 133 / 2)), CIRCLE_RADIUS, CIRCLE_WIDTH)
            elif board[row][col] == 1:
                pygame.draw.line(screen, CROSS_COLOR, (col * 133 + SPACE, row * 133 + 133 - SPACE), (col * 133 + 133 - SPACE, row * 133 + SPACE), CROSS_WIDTH )
                pygame.draw.line(screen, CROSS_COLOR, (col * 133 + SPACE, row * 133 + SPACE), (col * 133 + 133 - SPACE, row * 133 + 133 - SPACE), CROSS_WIDTH )


def mark_square(row, col, player):
    board[row][col] = player



def available_square(row, col):
    if board[row][col] == 0:
        return True
    else:
        return False


def is_board_full():
    for row in range(BOARD_ROWS):
        for col in range (BOARD_COLS):
            if board[row][col] == 0:
                return False
    return True

def check_win(player):
    #vertical win check
    for col in range(BOARD_COLS):
        if board[0][col] == player and board[1][col] == player and board[2][col] == player:
            draw_vertical_winning_line(col, player)
            return True
    #horizontal win check
    for row in range (BOARD_ROWS):
        if board[row][0] == player and board[row][1] == player and board[row][2] == player:
            draw_horizontal_winning_line(row, player)
            return True
    #asceding diagonal win check
    if board[2][0] == player and board[1][1] == player and board[0][2] == player:
        draw_asc_diagonal(player)
        return True
    #descending diagonal win check
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:
        draw_desc_diagonal(player)
        return True
    return False

def draw_vertical_winning_line(col, player):
    posX = col * 133 + 133/2
    if player == 1:
        color = CROSS_COLOR
    elif player == 2:
        color = CIRCLE_COLOR

    pygame.draw.line( screen, color, (posX, 15), (posX, HEIGHT - 15), 15)

def draw_horizontal_winning_line(row, player):
    posY = row * 133 + 133/2
    if player == 1:
        color = CROSS_COLOR
    elif player == 2:
        color = CIRCLE_COLOR

    pygame.draw.line(screen, color, (15, posY), (WIDTH - 15, posY), 15)

def draw_asc_diagonal(player):
    if player == 1:
        color = CROSS_COLOR
    elif player == 2:
        color = CIRCLE_COLOR

    pygame.draw.line(screen, color, (15, HEIGHT - 15), (WIDTH - 15, 15), 15)

def draw_desc_diagonal(player):
    if player == 1:
        color = CROSS_COLOR
    elif player == 2:
        color = CIRCLE_COLOR

    pygame.draw.line(screen, color, (15, 15), (WIDTH - 15, HEIGHT - 15), 15)

player=1
game_over = False

def restart():
    screen.fill(BG_COLOR)
    draw_lines()
    game_over = False
    player = 1
    for row in range (BOARD_ROWS):
        for col in range (BOARD_COLS):
            board[row][col] = 0

draw_lines()


#mainloop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            sys.exit()

        if event.type == pygame.MOUSEBUTTONDOWN and not game_over:
            mouseX = event.pos[0] # x
            mouseY = event.pos[1] # y

            clicked_row = int(mouseY // 125)
            clicked_col = int(mouseX // 125)

            #print(clicked_row, clicked_col)

            if available_square(clicked_row, clicked_col):
                if player == 1:
                    mark_square(clicked_row, clicked_col, 1)
                    if check_win(player):
                        game_over = True
                    player = 2
                elif player == 2:
                    mark_square(clicked_row, clicked_col, 2)
                    if check_win(player):
                        game_over = True
                    player = 1

                draw_figures()

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_r:
                restart()
    pygame.display.update()
